# -*- coding: utf-8 -*-
"""ImagePreVisualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F8vTmgcx0Uq3OW0yjhJo5NDngk04Cti3
"""

import numpy as np
from sklearn import decomposition, datasets
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
import pandas as pd

# Load the breast cancer dataset
dataset = datasets.load_breast_cancer()

# Load the features
X = dataset.data
y = dataset.target

X

y

print(dataset.DESCR)

dataset.feature_names

df=pd.DataFrame(X,columns=dataset.feature_names)
df

df.shape

sc = StandardScaler()

# Fit the scaler to the features and transform
df_std = sc.fit_transform(df)

df_std

"""#PCA

Por fim podemos aplicar a técnica PCA nos atributos escolhidos, de forma grossa o PCA nada mais é que uma técnica a qual transforma atributos com uma certa correlação em um único atributo. O PCA deve ser aplicado apenas em casos em que o seu dataset possui muitas colunas, realmente um número muito grande e o treino do seu modelo acaba por ser muito demorado ou inviável devido ao alto número de colunas, uma vez que o PCA é uma técnica na qual sempre haverá perda de informações
"""

# Create a pca object with the 2 components as a parameter
pca = decomposition.PCA(n_components=2)

# Fit the PCA and transform the data
df_pca = pca.fit_transform(df_std)

df_pca

from sklearn.model_selection import train_test_split

df_final=pd.DataFrame(df_pca,columns=['component1','component2'])
df_final_visual=df_final
df_final_visual['class']=y

import altair as alt

alt.Chart(df_final_visual).mark_point().encode(
x='component1',
y='component2',
color='class')

X_train,X_test,y_train,y_test=train_test_split(df_final,y)
clf=SVC()
clf.fit(X_train,y_train)

clf.score(X_test,y_test)

predictions=clf.predict(df_final)
df_final_visual=df_final
df_final_visual['class']=predictions

import altair as alt

alt.Chart(df_final_visual).mark_point().encode(
x='component1',
y='component2',
color='class')

clf=DecisionTreeClassifier()
clf.fit(X_train,y_train)
DecisionTreeClassifier()
clf.score(X_test,y_test)

predictions=clf.predict(df_final)
df_final_visual=df_final
df_final_visual['class']=predictions

import altair as alt

alt.Chart(df_final_visual).mark_point().encode(
x='component1',
y='component2',
color='class')

clf=KNeighborsClassifier()
clf.fit(X_train,y_train)
KNeighborsClassifier()
clf.score(X_test,y_test)

predictions=clf.predict(df_final)
df_final_visual=df_final
df_final_visual['class']=predictions
import altair as alt

alt.Chart(df_final_visual).mark_point().encode(
x='component1',
y='component2',
color='class')

